name: CI CD Process

on:
  push:
    branches: [ develop, main ]  # develop과 main 브랜치만 배포
  pull_request:
    branches: [ develop, main ]  # PR 생성/업데이트 시에도 실행
  workflow_dispatch:

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' || 
      (github.event_name == 'push' && github.ref == 'refs/heads/develop')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Gradle Wrapper
      uses: gradle/actions/wrapper-validation@v3
      
    - name: Debug and fix gradlew
      run: |
        echo "=== 디렉토리 구조 확인 ==="
        ls -la
        echo "=== be 디렉토리 내용 ==="
        ls -la be/
        echo "=== gradlew 파일 상세 정보 ==="
        cd be
        ls -la gradlew* || echo "gradlew 파일들을 찾을 수 없습니다"
        echo "=== gradlew 파일 타입 ==="
        file gradlew || echo "gradlew 파일 타입 확인 실패"
        echo "=== gradlew 첫 줄 확인 ==="
        head -1 gradlew || echo "gradlew 첫 줄 읽기 실패"
        echo "=== 라인 엔딩 수정 ==="
        sed -i 's/\r$//' gradlew
        echo "=== 실행 권한 부여 ==="
        chmod +x gradlew
        echo "=== 수정 후 gradlew 상태 ==="
        ls -la gradlew
        file gradlew
        echo "=== gradlew 실행 테스트 ==="
        ./gradlew --version || echo "gradlew 실행 실패"
      
    - name: Run tests
      run: cd be && ./gradlew clean test
      
    - name: Build application
      run: cd be && ./gradlew build -x test
      
    - name: Build status
      run: |
        if [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref }}" == "refs/heads/develop" ]; then
          echo "✅ develop 브랜치 빌드 완료 - 배포 없이 테스트/빌드만 수행됨"
        else
          echo "✅ PR 테스트/빌드 완료"
        fi

  deploy:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') || 
      github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Deploy to server
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: 119.56.208.5
        username: kjh
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22222
        script_stop: true
        script: |
          cd /home/kjh/Project/Campung_Backend
          
          # 현재 푸시된 브랜치 정보 출력
          echo "🚀 운영 서버 배포 시작: ${{ github.ref_name }} 브랜치"
          echo "📦 배포 타입: ${{ github.event_name }}"
          
          # 현재 브랜치 확인 및 업데이트 (강제 체크아웃 제거!)
          git fetch origin
          
          # 현재 브랜치가 푸시된 브랜치와 다르면 체크아웃
          CURRENT_BRANCH=$(git branch --show-current)
          TARGET_BRANCH="${{ github.ref_name }}"
          
          if [ "$CURRENT_BRANCH" != "$TARGET_BRANCH" ]; then
            echo "브랜치 변경: $CURRENT_BRANCH → $TARGET_BRANCH"
            git checkout $TARGET_BRANCH
          fi
          
          git pull origin $TARGET_BRANCH
        
          # be 디렉토리로 이동
          cd be
          
          # gradlew 파일 문제 해결
          echo "gradlew 파일 상태 확인 및 수정..."
          ls -la gradlew
          file gradlew
          
          # 라인 엔딩 강제 수정 (CRLF → LF)
          sed -i 's/\r$//' gradlew
          
          # 실행 권한 부여
          chmod +x gradlew
          
          # 수정 후 상태 확인
          ls -la gradlew
          file gradlew
          
          # gradlew 실행 가능성 테스트
          if ./gradlew --version; then
            echo "✅ gradlew 정상 실행 가능"
          else
            echo "⚠️ gradlew 실행 실패, 문제 해결 시도..."
            
            # Java 설치 확인
            which java
            java -version
            
            # 강제로 실행 가능하도록 만들기
            chmod 755 gradlew
            
            # shebang 라인 확인 및 수정
            if ! head -1 gradlew | grep -q "^#!/"; then
              echo "#!/usr/bin/env sh" > gradlew.tmp
              tail -n +1 gradlew >> gradlew.tmp
              mv gradlew.tmp gradlew
              chmod +x gradlew
            fi
            
            # 다시 테스트
            ./gradlew --version || echo "여전히 실행 불가능"
          fi
          
          ./gradlew clean build -x test
          sudo systemctl daemon-reload
          sudo systemctl restart campung-backend
          
          # 애플리케이션 시작 대기 (더 긴 시간)
          echo "애플리케이션 시작 대기 중..."
          sleep 30
          
          # 추가적인 헬스체크 (최대 60초까지 대기)
          for i in {1..12}; do
            if curl -f http://localhost:8080/ > /dev/null 2>&1; then
              echo "✅ 애플리케이션 응답 확인 완료 ($((i*5))초 후)"
              break
            else
              echo "대기 중... ($((i*5))초)"
              sleep 5
            fi
          done
          
          # Docker 컨테이너 상태 확인 (안전 모드)
          echo "Docker 컨테이너 상태 확인 중..."
          
          # 안전한 컨테이너 확인 (grep 실패해도 스크립트 중단 안함)
          DOCKER_CONTAINERS=$(docker ps --format "{{.Names}}" 2>/dev/null || echo "")
          
          if echo "$DOCKER_CONTAINERS" | grep -q "Campung" 2>/dev/null; then
            echo "✅ MariaDB 컨테이너 정상 실행 중"
          else
            echo "⚠️ MariaDB 컨테이너 확인 필요"
          fi
          
          if echo "$DOCKER_CONTAINERS" | grep -q "campung-redis" 2>/dev/null; then
            echo "✅ Redis 컨테이너 정상 실행 중"
          else
            echo "⚠️ Redis 컨테이너 확인 필요"
          fi
          
          echo "✅ Docker 컨테이너 상태 확인 완료 (서비스는 계속 진행)"
          
          # 최종 배포 상태 확인
          echo "최종 배포 상태 확인 중..."
          
          # 애플리케이션 응답 최종 확인
          if curl -f http://localhost:8080/ > /dev/null 2>&1; then
            echo "✅ 최종 확인: 애플리케이션 응답 정상"
            echo "✅ 배포 성공: 캠펑 백엔드가 정상적으로 실행 중입니다!"
          else
            echo "⚠️ 애플리케이션 응답 확인 실패"
            echo "서비스 상태 확인:"
            sudo systemctl status campung-backend --no-pager
            echo "❌ 배포 실패: 애플리케이션이 응답하지 않습니다."
            exit 1
          fi
          
          # systemd 서비스 상태 확인 (정보성)
          if systemctl is-active --quiet campung-backend; then
            echo "✅ systemd 서비스 상태: 정상"
          else
            echo "⚠️ systemd 서비스 상태 확인 필요 (애플리케이션은 정상 응답 중)"
          fi
